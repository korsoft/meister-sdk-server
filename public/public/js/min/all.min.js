var meister = angular.module('meister', ['ngMaterial', 'ngAnimate','ngSanitize', 'ngMessages',
 'ngAria', 'ui.router','ngCookies','md.data.table','chart.js','TreeWidget','angular-oauth2']);

meister.constant('SERVER_BASE_URL', "http://localhost:8000");
meister.constant('CLIENT_SECRET_KEY',"GzkU62Ruwo29riFgJHVDPw377k8hYu5dXXYxgYSR");
meister.constant('SYSTEM_ADMIN',99);
meister.constant('CLIENT_ADMIN',49);
meister.constant('CLIENT_USER',29);


(function(app) {
    app.config(['$stateProvider', '$urlRouterProvider','OAuthProvider','OAuthTokenProvider','SERVER_BASE_URL','CLIENT_SECRET_KEY', 
        function($stateProvider, $urlRouterProvider, OAuthProvider, OAuthTokenProvider, SERVER_BASE_URL, CLIENT_SECRET_KEY) {

        OAuthTokenProvider.configure({
            name: 'meister-sdk-token',
              options: {
                secure: false
              }
        });
        
        OAuthProvider.configure({
              baseUrl: SERVER_BASE_URL,
              clientId: '2',
              clientSecret: CLIENT_SECRET_KEY, // optional
              grantPath: '/api/login',
              revokePath: '/api/logout'
        });

        $urlRouterProvider.otherwise('/');

        $stateProvider.state('login', {
		url: '/login',
		templateUrl: 'partials/login-partial.html',
		controller: 'LoginController'
	})

	.state('home', {
            url: '/',
            templateUrl: 'partials/home-partial.html',
            controller: 'HomeController'
        })
        .state('clients', {
            url: '/clients',
            templateUrl: 'partials/clients-partial.html',
            controller: 'ClientController'
        })
        .state('users', {
            url: '/users',
            templateUrl: 'partials/users-partial.html',
            controller: 'UserController'
        })
        .state('edit-profile', {
            url: '/edit-profile',
            templateUrl: 'partials/edit-profile-partial.html',
            controller: 'EditProfileController'
        })
        .state('gateways', {
            url: '/gateways',
            templateUrl: 'partials/client-gateways-partial.html',
            controller: 'ClientGatewayController'
        });

    }]).run(['$rootScope', '$location','$mdToast','OAuth',
    function ($rootScope, $location,$mdToast,OAuth) {

        
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            if ($location.path() !== '/login' && !OAuth.isAuthenticated()) {
                $location.path('/login');
            }
        });

        $rootScope.$on('oauth:error', function(event, rejection) {
          // Ignore `invalid_grant` error - should be catched on `LoginController`.
          if ('invalid_grant' === rejection.data.error) {
            return;
          }

          // Refresh token when a `invalid_token` error occurs.
          if ('invalid_token' === rejection.data.error) {
            return OAuth.getRefreshToken();
          }

          console.log("oauth:error", rejection.data.error);

          $mdToast.show(
                          $mdToast.simple()
                            .textContent(rejection.data.error)
                            .position('top' )
                            .highlightClass('md-warn')
                            .hideDelay(3000)
                        );

          // Redirect to `/login` with the `error_reason`.
          return $location.path('/login');
        });
    }]);
})(meister);

(function(app) {
	app.factory('AuthenticationService',
    ['OAuth',
    function (OAuth) {
        var service = {};

        service.Login = function (user, pass) {
            return OAuth.getAccessToken({username:user,password:pass,email:user});
        };

        service.Logout = function(){
        	return OAuth.revokeToken();
        };
 
        return service;
    }])
 
})(meister);

(function(app) {
	app.factory('apiUtils',
    ['$http','SERVER_BASE_URL',
    function ($http, SERVER_BASE_URL) {
       
        var API_BASE_URL = SERVER_BASE_URL + '/api';
		
		var METHOD_GET = 'GET';
		var METHOD_POST = 'POST';
		var METHOD_PUT = 'PUT';
		var METHOD_DELETE = 'DELETE';

        var prepareRequest = function(method, path, params, data){
			var req = {};
			req.method = method;
			req.url = API_BASE_URL + path;

			req.params = params || {};

			if (data){
				req.data = data;
			}

			return req;
		};

	var apiUtils = {};

	apiUtils.get = function(path, params, cb){
		var req = prepareRequest(METHOD_GET, path, params, null);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.post = function(path, data, cb){
		var req = prepareRequest(METHOD_POST, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.put = function(path, data, cb){
		var req = prepareRequest(METHOD_PUT, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.del = function(path, params, cb){
		var req = prepareRequest(METHOD_DELETE, path, params, cb);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};
 

    return apiUtils;
    }]);
})(meister);

(function(app) {
	app.factory('ClientService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/clients');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/clients',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clients/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/clients/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/clients/'+id);
        }

        return service;
    }]);
})(meister);
(function(app) {
	app.factory('GatewayService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/clientgateways');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/clientgateways',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clientgateways/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/clientgateways/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/clientgateways/'+id);
        }

        service.test_connection = function(id){
            return $http.get(SERVER_BASE_URL + '/api/clientgateways/'+id+'/test_connection');
        };

        return service;
    }]);
})(meister);

(function(app) {
	app.factory('MessageUtil',
    ['$mdToast',
    function ($mdToast) {
        var service = {};

        service.showError = function (message) {
             $mdToast.show(
                $mdToast.simple()
                        .textContent(message)
                        .position('top right')
                        .theme('error-toast')
                        .hideDelay(3000)
                    );
        };

        service.showInfo = function (message) {
             $mdToast.show(
                $mdToast.simple()
                        .textContent(message)
                        .position('top right')
                        .hideDelay(3000)
                    );
        };

        
        return service;
    }]);
})(meister);
(function(app) {
	app.factory('UserService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.index = function () {
            return $http.get(SERVER_BASE_URL + '/api/users');
        };

        service.store = function(data){
            return $http.post(SERVER_BASE_URL + '/api/users',data);
        };

        service.show = function(id){
            return $http.get(SERVER_BASE_URL + '/api/users/'+id);
        }

        service.update = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/users/'+id, data);
        }

       service.destroy = function(id){
            return $http.delete(SERVER_BASE_URL + '/api/users/'+id);
        }

        service.types = function(){
            return $http.get(SERVER_BASE_URL + '/api/types');
        }

        service.update_my_user = function(id, data){
            return $http.put(SERVER_BASE_URL + '/api/users/'+id+'/update_my_user', data);
        }

        return service;
    }]);
})(meister);
(function(app) {
	app.controller('ClientController',
    ['$scope', '$location','$mdToast','$mdDialog','ClientService','MessageUtil',
    function ($scope, $location, $mdToast, $mdDialog, ClientService, MessageUtil) {
        
        $scope.clients = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'name',
          limit: 5,
          page: 1,
          filter:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filter = "";
        };

        $scope.init = function(){
          console.log("ClientController init...");
          $scope.promise = ClientService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.clients = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, client) {
              $mdDialog.show({
                controller: 'ClientDialogController',
                templateUrl: 'templates/client-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 client: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Client was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.edit = function(ev, client) {
              $mdDialog.show({
                controller: 'ClientDialogController',
                templateUrl: 'templates/client-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 client: client
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("Client was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.delete = function(ev, client){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('Client ' + client.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = ClientService.destroy(client.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("Client was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

        
    }]);
})(meister);
(function(app) {
	app.controller('ClientDialogController',
    ['$scope','$mdDialog','client','ClientService','MessageUtil',
    function ($scope, $mdDialog, client, ClientService, MessageUtil) {
  
        $scope.client = {};
        $scope.promise = null;
         $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!client)
          $scope.client.name = "";
        else
          $scope.client = angular.copy(client);

        console.log("Client", client);

        $scope.save = function(){
          
            if($scope.client.id)
              $scope.promise = ClientService.update($scope.client.id, $scope.client);
            else
              $scope.promise = ClientService.store($scope.client);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('ClientGatewayController',
    ['$scope', '$location','$mdToast','$mdDialog','MessageUtil','GatewayService',
    function ($scope,$location,$mdToast,$mdDialog,MessageUtil,GatewayService) {
        
        $scope.gateways = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'name',
          limit: 5,
          page: 1,
          filterByName:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filterByName = "";
        };

        $scope.init = function(){
          console.log("ClientGatewayController init...");
          $scope.promise = GatewayService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.gateways = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, gateway) {
              $mdDialog.show({
                controller: 'ClientGatewayDialogController',
                templateUrl: 'templates/client-gateway-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 gateway: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("Gateway was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.type = function(type){
            if(type == 0)
              return "BASIC";
            else if(type == 1)
              return "FORM";
            else if(type == 2)
              return "DIGEST";
            else if(type == 3)
              return "OAUTH";
            return "";
         };

         $scope.edit = function(ev, gateway) {
              $mdDialog.show({
                controller: 'ClientGatewayDialogController',
                templateUrl: 'templates/client-gateway-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 gateway: gateway
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("Gateway was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.delete = function(ev, gateway){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('Gateway ' + gateway.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = GatewayService.destroy(gateway.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("Gateway was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

         $scope.test_connection = function(evt, gateway){
            $scope.promise = GatewayService.test_connection(gateway.id);

            $scope.promise.then(
                function(result){
                  MessageUtil.showInfo("Connection successful");
                },
                function(error){
                   MessageUtil.showError(error.data.message);
                }
              );
         };
        
    }]);
})(meister);
(function(app) {
	app.controller('ClientGatewayDialogController',
    ['$scope','$rootScope','$mdDialog','gateway','GatewayService','ClientService','MessageUtil',
    function ($scope,$rootScope, $mdDialog, gateway, GatewayService,ClientService, MessageUtil) {
  
        $scope.gateway = {};
        $scope.clients = [];
        $scope.types = [
          {id:0,name:"BASIC"},
          {id:1,name:"FORM"},
          {id:2,name:"DIGEST"},
          {id:3,name:"OAUTH"}
        ];
        $scope.promise = null;

        $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!gateway){
          $scope.gateway.name = "";
          $scope.gateway.url = "";
          $scope.gateway.username = "";
          $scope.gateway.password = "";
          $scope.gateway.auth_type = 0;
          $scope.gateway.digest = "";
        } else {
          $scope.gateway = angular.copy(gateway);
          $scope.gateway.client_id = Number($scope.gateway.client_id);
        }

        console.log("gateway", gateway);

        if($rootScope.)
        $scope.promise = ClientService.index();

        $scope.promise.then(
            function(result){
              console.log("result",result);
              $scope.clients = result.data;
            },
            function(error){
              console.log("error",error);
                  MessageUtil.showError(error.data.message);
            }
        );

        $scope.changeAuthType = function(type){
          $scope.gateway.auth_type = type;
        };

        $scope.save = function(){
          
            if($scope.gateway.id)
              $scope.promise = GatewayService.update($scope.gateway.id, $scope.gateway);
            else
              $scope.promise = GatewayService.store($scope.gateway);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
         
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('EditProfileController',
    ['$scope','$rootScope','$mdToast','UserService','MessageUtil',
    function ($scope,$rootScope, $mdToast, UserService, MessageUtil) {
        
        $scope.user = {};
        $scope.repassword = '';
        $scope.promise = null;
        
        $scope.init = function(){
          console.log("EditProfileController init...");
          $scope.promise = UserService.show($rootScope.user_id());

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.user = result.data;
                      $scope.user.password = "";
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

        $scope.update = function(){
          $scope.promise = UserService.update_my_user($rootScope.user_id(),$scope.user);

          $scope.promise.then(
              function(result){
                MessageUtil.showInfo("User was updated");
                $scope.user.password = "";
                $scope.repassword = "";
              },
              function(error){
                console.log('failure login', error);
                MessageUtil.showError(error.data.message);
              }
          );
        };
        
    }]);
})(meister);
(function(app) {
	app.controller('HomeController', ['$scope',
		function($scope) {
		
    	$scope.treeOptions = {showIcon:false,expandOnClick:true};
    	$scope.basicTree=[{
	        name: "Node 1",
	        children: [{
	            name: "Node 1.1",
	            children:[{name:"Node 1.1.1"},{name: "Node 1.1.2"}]
	        }]},{
	        name: "Node 2",
	        children: [{name: "Node 2.1"},{name: "Node 2.2"}]
	    }];

	     $scope.$on('selection-changed', function (e, node) {
	        console.log("Node selected",node);
	        $scope.selectedNode = node;
	    });

	     $scope.$on('expanded-state-changed', function (e, node) {
	        console.log("Expanded node",node);
	        $scope.expandedNode = node;
	        //console.log(node.expanded);
    	});

  
	}]);
})(meister);

(function(app) {
	app.controller('LoginController',
    ['$scope', '$rootScope', '$location','$mdToast', '$cookies','AuthenticationService','MessageUtil',
    function ($scope, $rootScope, $location, $mdToast, $cookies, AuthenticationService, MessageUtil) {
        
        $cookies.remove('meister-sdk-token');

        $scope.login = function () {
            $scope.promise =  AuthenticationService.Login($scope.username, $scope.password);

            $scope.promise.then(
                  function(result) { 
                      console.log("Login",result);
                       $location.path('/');
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError('The user credentials were incorrect');
                  }
             );

        };
    }]);
})(meister);

(function(app) {
	app.controller('MainController', ['$scope','$rootScope','$cookies','$location','$timeout',
		'$mdSidenav','$mdMenu','$state','SYSTEM_ADMIN','CLIENT_ADMIN','CLIENT_USER','AuthenticationService',
		function($scope,$rootScope,$cookies,$location,$timeout, $mdSidenav,$mdMenu, $state, 
			SYSTEM_ADMIN, CLIENT_ADMIN, CLIENT_USER, AuthenticationService) {
		
		console.log("MainController init");
		$rootScope.toggleLeft = buildToggler('left');
    	$rootScope.toggleRight = buildToggler('right');
    	$rootScope.SYSTEM_ADMIN = SYSTEM_ADMIN;
    	$rootScope.CLIENT_ADMIN = CLIENT_ADMIN;
    	$rootScope.CLIENT_USER = CLIENT_USER;
    	
    	
	    function buildToggler(componentId) {
	      return function() {
	        $mdSidenav(componentId).toggle();
	      };
	    }

	    $rootScope.gotoHome = function(){
	    	$rootScope.transition = 'fade-in';
	    	$state.go('home');
	    };

	   
	     $rootScope.openMenu = function($mdOpenMenu,ev) {
		      $mdOpenMenu(ev);
		 };

		 $rootScope.logout = function(){
		 	//$cookies.remove('meister-sdk-token');
		 	AuthenticationService.Logout().then(
		 		function(result){
		 			console.log("Logout successful",result);
		 			$location.path('/login');
		 		},
		 		function(error){
		 			console.log(error);
		 		}
		 		); 
		 	
		 };

		 $rootScope.user_type = function(){
		 	var token_data = $cookies.get('meister-sdk-token');
		 	if(token_data){
		 		token_data = angular.fromJson(token_data);
		 		return token_data.user_type;
		 	}

		 	return -1;
		 };

		 $rootScope.user_id = function(){
		 	var token_data = $cookies.get('meister-sdk-token');
		 	if(token_data){
		 		token_data = angular.fromJson(token_data);
		 		return token_data.user_id;
		 	}

		 	return 0;
		 };

	    $rootScope.transition = 'fade-in';
	}]);
})(meister);

(function(app) {
	app.controller('UserController',
    ['$scope', '$location','$mdToast','$mdDialog','UserService','MessageUtil',
    'SYSTEM_ADMIN','CLIENT_ADMIN','CLIENT_USER',
    function ($scope, $location, $mdToast, $mdDialog, UserService, MessageUtil, 
      SYSTEM_ADMIN,CLIENT_ADMIN,CLIENT_USER) {
        
        $scope.users = [];
        $scope.promise = null;
        
        $scope.filter = {
          show: false
        }

        $scope.query = {
          order: 'email',
          limit: 5,
          page: 1,
          filterByEmail:'',
          filterByFirstName:'',
          filterByLastName:''
        };

        $scope.limitOptions = [5, 10, 25, 50, 100];

        $scope.removeFilter = function(){
          $scope.filter.show = false;
          $scope.query.filterByEmail = "";
          $scope.query.filterByFirstName = "";
          $scope.query.filterByLastName = "";
        };

        $scope.init = function(){
          console.log("UserController init...");
          $scope.promise = UserService.index();

          $scope.promise.then(
                  function(result) { 
                    console.log("result",result);
                      $scope.users = result.data;
                  },
                  function(errorPayload) {
                      console.log('failure login', errorPayload);
                      MessageUtil.showError(errorPayload.data.message);
                  }
             );
        };

         $scope.add = function(ev, user) {
              $mdDialog.show({
                controller: 'UserDialogController',
                templateUrl: 'templates/user-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 user: null
               }
              })
              .then(function(result) {
                MessageUtil.showInfo("User was created");
                $scope.init();
              }, function() {
               
              });
         };

         $scope.edit = function(ev, user) {
              $mdDialog.show({
                controller: 'UserDialogController',
                templateUrl: 'templates/user-dialog-form.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose:false,
                escapeToClose: false,
                locals: {
                 user: user
               }
              })
              .then(function(result) {
                  MessageUtil.showInfo("User was updated");
                  $scope.init();
              }, function() {
               
              });
         };

         $scope.type = function(t){
             if(t == SYSTEM_ADMIN)
              return "SYSTEM_ADMIN";
            else if(t == CLIENT_ADMIN)
              return "CLIENT_ADMIN";
            else if(t == CLIENT_USER)
              return "CLIENT_USER";
         };

         $scope.delete = function(ev, user){
            var confirm = $mdDialog.confirm()
                .title('You are about to delete the following')
                .htmlContent('User ' + user.name)
                .targetEvent(ev)
                .ok('Yes')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
               $scope.promise = UserService.destroy(user.id);
               $scope.promise.then(
                  function(result){
                    MessageUtil.showInfo("User was deleted");
                    $scope.init();
                  },
                  function(error){
                    MessageUtil.showError(error.data.message);
                  }
                );
            }, function() {
              
            });
         };

        
    }]);
})(meister);
(function(app) {
	app.controller('UserDialogController',
    ['$scope','$rootScope','$mdDialog','user','ClientService','UserService','MessageUtil',
    function ($scope, $rootScope, $mdDialog, user, ClientService, UserService, MessageUtil) {
  
        $scope.user = {};
        $scope.types = [];
        $scope.clients = [];
        $scope.promise = null;

        $scope.cancel = function() {
           $mdDialog.cancel();
        };

        if(!user){
          $scope.user.email = "";
          $scope.user.first_name = "";
          $scope.user.last_name = "";
          $scope.user.type = $rootScope.CLIENT_USER;
          $scope.user.client_id = null;
        } else
            $scope.user = angular.copy(user);

           console.log("User", user);


        if($rootScope.user_type() == $rootScope.SYSTEM_ADMIN){
           ClientService.index().then(
              function(result){
                $scope.clients = result.data;
                if(!$scope.user.id)
                  $scope.user.client_id = result.data[0].id;
              },
              function(error){
                console.log("error",error);
                MessageUtil.showError(error.data.message);
              }
            );
        } else {
          $scope.clients = [];
          $scope.client_id = null;
        }


        UserService.types().then(
            function(result){
              $scope.types = result.data;
            },
            function(error){
              console.log("error",error);
              MessageUtil.showError(error.data.message);
            }
          );


       

        $scope.save = function(){
          
            if($scope.user.id)
              $scope.promise = UserService.update($scope.user.id, $scope.user);
            else
              $scope.promise = UserService.store($scope.user);

            $scope.promise.then(
                function(result){
                  console.log("result",result);
                  $mdDialog.hide(result);
                },
                function(error){
                  console.log("error",error);
                  MessageUtil.showError(error.data.message);
                }
              );
      
        };
        
    }]);
})(meister);
(function(app) {
	app.directive('mainMenu', function() {
		return {
			//scope: {},
			//controller: function($scope, $element, $attrs, $transclude) {},
			//require: 'ngModel',
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<p>Hola Mundo!!</p>'
			templateUrl: 'templates/main-menu.html',
			//replace: true,
			//transclude: true,
			//link: function($scope, elem, attrs, controller) {}
		};
	});
})(meister);

(function(app) {
	app.directive('mainToolbar', function() {
		return {
			//scope: {},
			//controller: function($scope, $element, $attrs, $transclude) {},
			//require: 'ngModel',
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<p>Hola Mundo!!</p>'
			templateUrl: 'templates/main-toolbar.html',
			//replace: true,
			//transclude: true,
			//link: function($scope, elem, attrs, controller) {}
		};
	});
})(meister);
